{ *********************************************************************** }
{                                                                         }
{ SIT Main Unit                                                           }
{                                                                         }
{ Copyright (c) 2011-2013 P.Meisberger (PM Code Works)                    }
{                                                                         }
{ *********************************************************************** }

unit SitMain;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, ExtCtrls, Menus, SitAPI, ExtDlgs, ShellAPI, FileCtrl;

type
  { Messagebox-Typ }
  TMessageType = (mtInfo, mtWarning, mtQuestion, mtError);

  TForm1 = class(TForm)
    iBack: TImage;
    lCopy: TLabel;
    lVersion: TLabel;
    Image: TImage;
    bAccept: TButton;
    bShowSupport: TButton;
    MainMenu: TMainMenu;
    mmFile: TMenuItem;
    mmImport: TMenuItem;
    mmExport: TMenuItem;
    mmEdit: TMenuItem;
    mmShowValues: TMenuItem;
    mmDelValues: TMenuItem;
    mmHelp: TMenuItem;
    mmInfo: TMenuItem;
    mmExportEdit: TMenuItem;
    N1: TMenuItem;
    N2: TMenuItem;
    mmDelEdit: TMenuItem;
    mmDelLogo: TMenuItem;
    mmDwnldCert: TMenuItem;
    mmUpdate: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    mmView: TMenuItem;
    mmLang: TMenuItem;
    mmGer: TMenuItem;
    mmEng: TMenuItem;
    mmFra: TMenuItem;
    mmReport: TMenuItem;
    mmCopyIcon: TMenuItem;
    N5: TMenuItem;
    gbInfo: TGroupBox;
    eHours: TLabeledEdit;
    eModel: TLabeledEdit;
    ePhone: TLabeledEdit;
    eMan: TLabeledEdit;
    eUrl: TLabeledEdit;
    gbIcon: TGroupBox;
    bAdd: TButton;
    cbCopyIcon: TCheckBox;
    eLogo: TLabeledEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure bAcceptClick(Sender: TObject);
    procedure bAddClick(Sender: TObject);
    procedure mmImportClick(Sender: TObject);
    procedure mmExportClick(Sender: TObject);
    procedure mmExportEditClick(Sender: TObject);
    procedure mmShowValuesClick(Sender: TObject);
    procedure mmDelValuesClick(Sender: TObject);
    procedure mmDelEditClick(Sender: TObject);
    procedure mmDelLogoClick(Sender: TObject);
    procedure mmGerClick(Sender: TObject);
    procedure mmEngClick(Sender: TObject);
    procedure mmFraClick(Sender: TObject);
    procedure mmUpdateClick(Sender: TObject);
    procedure mmDwnldCertClick(Sender: TObject);
    procedure mmReportClick(Sender: TObject);
    procedure mmInfoClick(Sender: TObject);
    procedure eHoursDblClick(Sender: TObject);
    procedure eLogoDblClick(Sender: TObject);
    procedure eManDblClick(Sender: TObject);
    procedure eModelDblClick(Sender: TObject);
    procedure ePhoneDblClick(Sender: TObject);
    procedure eUrlDblClick(Sender: TObject);
    procedure lCopyClick(Sender: TObject);
    procedure lCopyMouseEnter(Sender: TObject);
    procedure lCopyMouseLeave(Sender: TObject);
    procedure bShowSupportClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure mmCopyIconClick(Sender: TObject);
  private
    sit: TSit;
    Support: TBaseSupportInfo;
    procedure DoExport(ADirect: Boolean);
    function GetLangID: Word;
    function OpenLogo: Boolean;
    procedure Refresh;
    procedure SetLanguage(ALangID: Word);
  public
    procedure ChangeLanguage(AMenuItem: TMenuItem; ALangID: Word);
    class function MessageBox(const AText: string; ACaption: TMessageType = mtInfo;
      AUpdate: Boolean = false): Integer; overload;
    class function MessageBox(const ATextID: Word; ACaption: TMessageType = mtInfo;
      AUpdate: Boolean = false): Integer; overload;
    { extrenal }
    property LangID: Word read GetLangID;
  end;

var
  Form1: TForm1;

implementation

uses SitInfo, SitUpdate;

{$R *.dfm}
{$R manifest.res}
{$R lang.res}

{ private }
procedure TForm1.DoExport(ADirect: Boolean);                       //Exportieren
var
  data: TBaseSupportInfo;
  saveDialog : TSaveDialog;

begin
  saveDialog := TSaveDialog.Create(Self);           //init saveDialog

  with saveDialog do
  begin
    Title := TSit.GetString(23);                    //Fenstername
    FileName := TSit.GetString(25);                 //Default-Dateiname
    Options := Options + [ofOverwritePrompt];       //Überschreiben-Dialog
  end;  //of with

  if ADirect then                                   //Einträge oder Eingaben?
     data := Support
  else
     data := TSupportReg.Create(eHours.Text, eLogo.Text, eMan.Text, eModel.Text,
                                ePhone.Text, eUrl.Text);
  try
    if TSit.CheckWindows then
       begin
       saveDialog.Filter := TSit.GetString(26);
       saveDialog.FilterIndex := 2;
       end  //of begin
    else
       saveDialog.Filter := TSit.GetString(27);

    if saveDialog.Execute then                      //"speichern" click
       case saveDialog.FilterIndex of
         1: Support.SaveAsIni(data, saveDialog.FileName);
         2: Support.SaveAsReg(data, saveDialog.FileName);
       end; //of case

  finally                                           //Dialog Objekt freigeben
    data := nil;
    saveDialog.Free;
  end;  //of finally
end;


function TForm1.GetLangID: Word;
begin
  result := sit.LangID;
end;


function TForm1.OpenLogo: Boolean;                              //Logo einbinden
var
  OpenLogoDialog : TOpenPictureDialog;

begin
  result := true;
  OpenLogoDialog := TOpenPictureDialog.Create(Self);        //init OpenLogoDialog

  with OpenLogoDialog do
  begin
    Options := Options + [ofFileMustExist];
    Filter := TSit.GetString(28);
    Title := TSit.GetString(24);                            //Fenstername

    if ((eLogo.Text <> '') and FileExists(eLogo.Text)) then //wenn logo existiert, dir. öffnen
       begin
       InitialDir := ExtractFilePath(eLogo.Text);
       FileName := ExtractFileName(eLogo.Text);
       end  //of begin
    else
       InitialDir := GetCurrentDir;
  end;  //of with

  try
    if OpenLogoDialog.Execute then
       begin                                                //"öffnen" click
       Image.Picture.LoadFromFile(OpenLogoDialog.FileName);

       if ((Image.Height > 400) or (Image.Width > 500)) then  //prüfen ob nicht > 400x500 Px
          begin    // > 400x500 Px
          MessageBox(TSit.GetString(31)+ IntToStr(Image.Height) +'x'+
                     IntToStr(Image.Width) +')!' +^J+ TSit.GetString(32), mtWarning);
          result := false;
          end  //of begin
       else        // < 400x500 Px
          eLogo.Text := OpenLogoDialog.FileName;
       end //of begin

  finally
    OpenLogoDialog.Free;
    eLogo.SetFocus;
  end; //of finally
end;


procedure TForm1.Refresh;                          //Daten aus Speicher anzeigen
begin
  with Support do
  begin
    eLogo.Text := Icon;
    eMan.Text := Man;
    eModel.Text := Model;
    eUrl.Text := Url;
    ePhone.Text := Phone;
    eHours.Text := Hours;
  end;  //of with

  mmDelLogo.Enabled := FileExists(Support.Icon);     //falls Icon existiert
  mmDelLogo.Visible := mmDelLogo.Enabled;            //"Icon löschen" verfügbar
end;


procedure TForm1.SetLanguage(ALangID: Word);              //Sprache lokalisieren
begin
  sit.LangID := ALangID;

  with TSit do
    begin
    mmFile.Caption := GetString(0);                       //"Datei" Menü
    mmImport.Caption := GetString(1);
    mmExport.Caption := GetString(2);
    mmExportEdit.Caption := GetString(3);

    mmEdit.Caption := GetString(4);                       //"Bearbeiten" Menü
    mmShowValues.Caption := GetString(5);
    mmDelValues.Caption := GetString(6);
    mmDelEdit.Caption := GetString(7);
    mmCopyIcon.Caption := GetString(75);
    mmDelLogo.Caption := GetString(8);

    mmView.Caption := GetString(9);                       //"Ansicht" Menü
    mmLang.Caption := GetString(10);

    mmHelp.Caption := GetString(66);                      //"Hilfe" Menü
    mmUpdate.Caption := GetString(11);
    mmDwnldCert.Caption := GetString(12);
    mmReport.Caption := GetString(70);
    mmInfo.Caption := GetString(13);

    gbIcon.Caption := GetString(76);                      //Logo
    eLogo.EditLabel.Caption := GetString(14);
    cbCopyIcon.Caption := mmCopyIcon.Caption;

    gbInfo.Caption := GetString(39);                      //Informationen
    eMan.EditLabel.Caption := GetString(15);
    ePhone.EditLabel.Caption := GetString(16);
    eHours.EditLabel.Caption := GetString(17);
    eModel.EditLabel.Caption := GetString(18);
    eUrl.EditLabel.Caption := GetString(19);

    bAccept.Caption := GetString(20);                     //Buttons
    bShowSupport.Caption := GetString(21);

    Form3.bFinished.Caption := GetString(62);
    Form2.Caption := GetString(67);
    end;  //of with
end;
{ of private }

{ public }
procedure TForm1.ChangeLanguage(AMenuItem: TMenuItem; ALangID: Word);
begin
  AMenuItem.Checked := not AMenuItem.Checked;
  SetLanguage(ALangID);
end;


class function TForm1.MessageBox(const AText: string; ACaption: TMessageType = mtInfo;
  AUpdate: Boolean = false): Integer;
var
  Title: string;
  Flags: Integer;

begin
  case ACaption of
    mtInfo:                                      //Information
      begin
      Title := TSit.GetString(39);
      Flags := MB_ICONINFORMATION;
      end;

    mtWarning:                                   //Warnung
      begin
      Title := TSit.GetString(40);
      Flags := MB_ICONWARNING;
      end;

    mtQuestion:                                  //Frage
      begin
      Title := TSit.GetString(41);
      Flags := MB_ICONQUESTION or MB_YESNO or MB_DEFBUTTON1;
      end;

    mtError:                                     //Fehler
      begin
      Title := TSit.GetString(42);
      Flags := MB_ICONERROR;
      end;

    else
      Flags := 0;
  end;  //of case

  if AUpdate then                                //Caption "Update"?
     Title := TSit.GetString(57);

  result := Application.MessageBox(PChar(AText), PChar(Title), Flags);
end;


class function TForm1.MessageBox(const ATextID: Word; ACaption: TMessageType = mtInfo;
  AUpdate: Boolean = false): Integer;
begin
  result := MessageBox(PChar(TSit.GetString(ATextID)), ACaption, AUpdate);
end;

{ VCL Events }
procedure TForm1.FormCreate(Sender: TObject);                     //init Objekte
begin
  sit := TSit.Create;                   
  if TSit.CheckWindows then
     Support := TSupportReg.Create
  else
     Support := TSupportIni.Create;
end;


procedure TForm1.FormDestroy(Sender: TObject);               //Objekte freigeben
begin
  Support.Free;
  sit.Free;
end;


procedure TForm1.FormShow(Sender: TObject);           //wenn Form angezeigt wird
const
  BCM_FIRST = $1600;
  BCM_SETSHIELD = BCM_FIRST + $000C;

var
  version: char;
  newWindows: Boolean;

begin
  version := TSit.GetWinVersion[1];        //Win Version auslesen
  newWindows := TSit.CheckWindows;
  cbCopyIcon.Enabled := newWindows;        //"Logo kopieren" Checkbox nur ab Windows Vista

  if not (newWindows or (version in ['X','2'])) then   //falls keine gültige Win Version
     begin
     MessageBox(TSit.GetString(64) + TSit.GetWinVersion + TSit.GetString(65), mtError);
     bAccept.Enabled := false;
     mmFile.Enabled := false;
     mmEdit.Enabled := false;
     eLogo.Enabled := false;
     eMan.Enabled := false;
     ePhone.Enabled := false;
     eHours.Enabled := false;
     eModel.Enabled := false;
     eUrl.Enabled := false;
     bShowSupport.Enabled := false;
     Exit;
     end;  //of begin

  mmShowValues.Click;                      //Einträge anzeigen
  SendMessage(bAccept.Handle, BCM_SETSHIELD, 0, Integer(true));  //UAC-Shield Button
end;


procedure TForm1.bAcceptClick(Sender: TObject);             //"Übernehmen" Click
begin
  if (MessageBox(33, mtQuestion) = IDYES) then
     try
       if cbCopyIcon.Checked then          //Logo kopieren?
          mmCopyIcon.Click;

       with Support do
       begin                               //Daten laden
         if ((eLogo.Text = '') xor (FileExists(eLogo.Text))) then    //existiert Logo?
            Icon := eLogo.Text
         else
            begin                          //sonst:
            MessageBox(72, mtWarning);     //Fehler
            eLogo.SetFocus;                //Fokus auf Logo-Pfad
            Exit;                          //Vorgang abbrechen!
            end;  //of if

         if (eMan.Text <> '') then         //mindestens Hersteller muss bekannt sein
            begin
            Phone := ePhone.Text;
            Hours := eHours.Text;
            Man := eMan.Text;
            Model := eModel.Text;
            Url := eUrl.Text;
            Save;                          //Daten speichern
            end  //of begin
         else
            begin
            MessageBox(53, mtWarning);
            eMan.SetFocus;
            Exit;
            end;  //of if
       end;  //of with

       MessageBox(38);                     //Erfolgreich!
       mmShowValues.Click;                 //Daten erneueren

     except
       MessageBox(71, mtError);
     end;  //of finally
end;


procedure TForm1.bAddClick(Sender: TObject);
begin
  if not OpenLogo then
     OpenLogo;
end;


procedure TForm1.mmImportClick(Sender: TObject);                   //Importieren
var
  openDialog : TOpenDialog;

begin
  openDialog := TOpenDialog.Create(Self);                  //init openDialog

  with openDialog do
  begin
    Title := TSit.GetString(22);                           //Fenstername
    Options := Options + [ofFileMustExist];

    if TSit.CheckWindows then
       begin
       Filter := TSit.GetString(26);
       FilterIndex := 2;
       end  //of begin
    else
       Filter := TSit.GetString(27);
  end;  //of with  

  try
    if openDialog.Execute then                               //"öffnen" click
       begin
       Caption := Application.Title + TSit.GetArchitecture +' - '+ ExtractFileName(openDialog.FileName);

       case openDialog.FilterIndex of                        //Import
         1: Support.LoadFromIni(openDialog.FileName);
         2: Support.LoadFromReg(openDialog.FileName);
       end;  //of case

       Refresh;                                              //anzeigen
       end;  //of begin

  finally
    openDialog.Free;
  end; //of finally
end;


procedure TForm1.mmExportClick(Sender: TObject);          //Einträge exportieren
begin
  DoExport(true);
end;


procedure TForm1.mmExportEditClick(Sender: TObject);       //Eingaben exportieren
begin
  if ((eLogo.Text = '') and (eMan.Text = '') and (eModel.Text = '') and
     (eUrl.Text = '') and (ePhone.Text = '') and (eHours.Text = '')) then
     MessageBox(TSit.GetString(53), mtWarning)
  else
     DoExport(false);
end;


procedure TForm1.mmShowValuesClick(Sender: TObject);         //Einträge anzeigen
begin
  mmDelEdit.Click;                                     //Eingaben löschen

  try
    Support.Load;                                      //Einträge auslesen
    Refresh;                                           //Einträge anzeigen
    mmDelValues.Enabled := Support.DataExists;
    mmExport.Enabled := mmDelValues.Enabled;

  except
    TSit.CreateError(46, 52);
  end; //of except
end;


procedure TForm1.mmDelValuesClick(Sender: TObject);           //Einträge löschen
begin
  if (MessageBox(34, mtQuestion) = IDYES) then
     begin
     mmDelLogo.Click;                                  //Logo Löschen?

     if (MessageBox(35, mtQuestion) = IDYES) then      //Exportieren?
        DoExport(true);

     if Support.Delete then                            //Einträge löschen
        begin
        mmDelValues.Enabled := false;
        MessageBox(37);
        end  //of begin
     else
        MessageBox(44, mtError);
     end;  //of begin
end;

                                                              //Eingaben löschen
procedure TForm1.mmDelEditClick(Sender: TObject);
begin
  Caption := Application.Title + TSit.GetArchitecture();  //FormCaption setzen
  mmDelLogo.Enabled := false;
  mmDelLogo.Visible := mmDelLogo.Enabled;
  //Support.Clear;                                          //Daten löschen
  eLogo.Clear;                                            //Editfelder leeren
  eMan.Clear;
  eModel.Clear;
  ePhone.Clear;
  eHours.Clear;
  eUrl.Clear;
  eMan.SetFocus;                                          //Fokus auf Hersteller
end;


procedure TForm1.mmCopyIconClick(Sender: TObject);               //Logo kopieren
var
  dir: string;

begin
  if FileExists(eLogo.Text) then                          //existiert Logo
     if (ExtractFileExt(eLogo.Text) <> '.bmp') then       //Endung ".bmp"?
        MessageBox(77, mtWarning)
     else
        begin
		    if SelectDirectory(TSit.GetString(59), '', dir) then  //"Ordner wählen"
           begin
           dir := dir +'\'+ ExtractFileName(eLogo.Text);

           if CopyFile(PChar(eLogo.Text), PChar(dir), true) then  //Logo kopieren
              begin
              MessageBox(TSit.GetString(73) + dir + TSit.GetString(74));
              eLogo.Text := dir;                          //neuer Logo-Pfad
              end  //of begin
           else
              MessageBox(71, mtError);
           end;  //of begin
		end  //of begin
  else
    MessageBox(72, mtWarning);
end;


procedure TForm1.mmDelLogoClick(Sender: TObject);                 //Logo löschen
begin
  if FileExists(Support.GetOEMLogo) then              //existiert Logo?
     if (MessageBox(36, mtQuestion) = IDYES) then     //Wirklich löschen?
        if Support.DeleteIcon then                    //Logo löschen!
           begin
           mmDelLogo.Visible := false;
           mmDelLogo.Enabled := false;
           eLogo.Clear;
           end  //of begin
        else
           TSit.CreateError(45, 52);
end;


procedure TForm1.mmGerClick(Sender: TObject);                //Sprache "Deutsch"
begin
  ChangeLanguage(mmGer, 100);
end;


procedure TForm1.mmEngClick(Sender: TObject);               //Sprache "Englisch"
begin
  ChangeLanguage(mmEng, 200);
end;


procedure TForm1.mmFraClick(Sender: TObject);            //Sprache "Französisch"
begin
  ChangeLanguage(mmFra, 300);
end;


procedure TForm1.mmUpdateClick(Sender: TObject);            //Nach Update suchen
begin
  with Form3 do
    begin
    UserUpdate := true;             //Messaging einschalten

    if UpdateExists then            //falls Update existiert...
       DoUpdate                     //Download
    else
       CheckForUpdate;              //andernfalls danach suchen
	  end;  //of with
end;


procedure TForm1.mmDwnldCertClick(Sender: TObject);   //Zertifikat herunterladen
begin
  mmDwnldCert.Enabled := false;
  Enabled := false;
  Form3.Initialize(TSit.GetString(12), false);
end;


procedure TForm1.mmReportClick(Sender: TObject);                 //Fehler melden
begin
  ShellExecute(Application.Handle, 'open', PChar(URL_CONTACT), nil, nil,
    SW_ShowNormal);
end;


procedure TForm1.mmInfoClick(Sender: TObject);                //Info Form öffnen
begin
  Enabled := false;
  if not Assigned(Form2) then
     Application.CreateForm(TForm2, Form2);
  Form2.Show;
end;

{ Edit-Felder }
procedure TForm1.eLogoDblClick(Sender: TObject);
begin
  if (eLogo.Text = '') then
     OpenLogo
  else
     eLogo.SelectAll;
end;


procedure TForm1.eManDblClick(Sender: TObject);
begin
  eMan.SelectAll;
end;


procedure TForm1.eModelDblClick(Sender: TObject);
begin
  eModel.SelectAll;
end;


procedure TForm1.ePhoneDblClick(Sender: TObject);
begin
  ePhone.SelectAll;
end;


procedure TForm1.eHoursDblClick(Sender: TObject);
begin
  eHours.SelectAll;
end;


procedure TForm1.eUrlDblClick(Sender: TObject);
begin
  eUrl.SelectAll;
end;

{ Hyperlink zur Website }
procedure TForm1.lCopyClick(Sender: TObject);
begin
  ShellExecute(Application.Handle, 'open', PChar(URL_BASE), nil, nil, SW_SHOWNORMAL);
end;


procedure TForm1.lCopyMouseEnter(Sender: TObject);
begin
  with (Sender as TLabel) do
    begin
    Font.Style := Font.Style + [fsUnderline];
    Font.Color := clBlue;
    Cursor := crHandPoint;
    end;  //of with
end;


procedure TForm1.lCopyMouseLeave(Sender: TObject);
begin
  with (Sender as TLabel) do
    begin
    Font.Style := Font.Style - [fsUnderline];
    Font.Color := clBlack;
    Cursor := crDefault;
    end;  //of with
end;


procedure TForm1.bShowSupportClick(Sender: TObject);
begin
  Support.Show(Application.Handle);
end;


procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  if Assigned(Form2) then
     Form2.Close;
  Form3.Close;
end;
{ of public }

end.
